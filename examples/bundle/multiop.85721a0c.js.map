{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,0BA4BA,IAAIC,EAAUC,EAAQC,EAAUC,EAC5BC,EAAQC,EACRC,EAAQC,EAASC,EAASC,EAASC,EACnCC,EACAC,EAAMC,EAAMC,EAAWC,EA2H3B,SAASC,IAERC,sBAAuBD,GAEvB,MAAME,EAAIC,OAAOC,YAAYC,MAAQ,IACrCjB,EAAOkB,SAASC,EAAQ,KAAJL,EACpBd,EAAOkB,SAASE,EAAQ,MAAJN,EACpBd,EAAOkB,SAASG,EAAQ,KAAJP,EAEpBb,EAAOiB,SAASC,GAAQ,KAAJL,EACpBb,EAAOiB,SAASE,GAAQ,KAAJN,EACpBb,EAAOiB,SAASG,GAAQ,KAAJP,EAEpBd,EAAOsB,oBACPrB,EAAOqB,oBAEPtB,EAAOuB,SAAWf,EAClBP,EAAOsB,SAAWd,EAClBF,EAAaiB,SAAUxB,EAAQC,EAAQ,CAAEwB,EAAAC,YAAaD,EAAAE,aAAcF,EAAAG,SAAUH,EAAAI,qBAAuB,CAAE3B,EAAQC,EAASC,EAASC,IACjIH,EAAO4B,SAASX,GAAI,IACpBjB,EAAO4B,SAAST,EAAI,IAEpBlB,EAAQ2B,SAASX,EAAI,IACrBhB,EAAQ2B,SAAST,EAAI,IAErBjB,EAAQ0B,SAASX,GAAI,IACrBf,EAAQ0B,SAAST,GAAI,IAErBhB,EAAQyB,SAASX,EAAI,IACrBd,EAAQyB,SAAST,GAAI,IAErBrB,EAAOuB,SAAWb,EAClBT,EAAOsB,SAAWZ,EAElBf,EAASmC,OAAQhC,EAAOF,E,CAnKzBkB,OAAOiB,uBAAyBP,EAAAO,uBAUhCC,iBAOCrC,EAAW,IAAI,EAAAF,EAAAwC,eAAe,CAAEC,WAAW,IAC3CvC,EAASwC,cAAerB,OAAOsB,kBAC/BzC,EAAS0C,QAASvB,OAAOwB,WAAYxB,OAAOyB,aAC5C5C,EAAS6C,cANO,QAMiB,GACjC7C,EAAS8C,UAAUC,SAAU,EAC7B/C,EAAS8C,UAAUE,KAAOlD,EAAAmD,iBAC1BC,SAASC,KAAKC,YAAapD,EAASqD,YAGpClD,EAAQ,IAAI,EAAAL,EAAAwD,OAGZ5C,EAAQ,IAAI,EAAAZ,EAAAyD,kBAAkB,SAAU,KACxC7C,EAAMwB,SAASsB,IAAK,EAAG,EAAG,GAC1B9C,EAAM+C,YAAa,EACnBtD,EAAMuD,IAAKhD,EAAOA,EAAMiD,QACxBxD,EAAMuD,IAAK,IAAI,EAAA5D,EAAA8D,cAAc,SAAU,MAGvC,MAAMC,EAAYnD,EAAMoD,OAAOC,OAC/BrD,EAAM+C,YAAa,EACnB/C,EAAMoD,OAAOE,QAAQC,UAAW,MAChCvD,EAAMoD,OAAOI,KAAO,KACpBxD,EAAMoD,OAAOK,WAAa,IAE1BN,EAAUO,KAAOP,EAAUQ,QAAS,EACpCR,EAAUS,MAAQT,EAAUU,IAAM,EAClCV,EAAUW,yBAGVvE,EAAS,IAAI,EAAAH,EAAA2E,mBAAmB,GAAItD,OAAOwB,WAAaxB,OAAOyB,YAAa,GAAK,IACjF3C,EAAOiC,SAASsB,IAAK,EAAG,EAAG,GAC3BvD,EAAOyE,IAAM,IACbzE,EAAOuE,yBAGPtE,EAAW,IAAI,EAAAyE,EAAAC,eAAe3E,EAAQD,EAASqD,YAG/C1C,EAAe,IAAI,EAAAkB,EAAAgD,WACnBlE,EAAamE,WAAa,CAAE,WAAY,UAGxClE,EAAO,IAAI,EAAAd,EAAAiF,sBACXnE,EAAKoE,KAAOlF,EAAAmF,WACZrE,EAAKsE,UAAY,GACjBtE,EAAKuE,MAAM3B,IAAK,UAEhB3C,EAAOD,EAAKwE,QACZvE,EAAKsE,MAAM3B,IAAK,UAEhB1C,EAAYF,EAAKwE,QACjBtE,EAAUuE,QAAU,IACpBvE,EAAUwE,aAAc,EACxBxE,EAAUyE,YAAa,EACvBzE,EAAU0E,eAAgB,EAC1B1E,EAAU2E,oBAAsB,GAChC3E,EAAU4E,mBAAqB,GAC/B5E,EAAU6E,oBAAqB,EAE/B5E,EAAYD,EAAUsE,QACtBrE,EAAUoE,MAAMS,KAAM/E,EAAKsE,OAG3B/E,EAAS,IAAI,EAAAyB,EAAAgE,OAAO,IAAI,EAAA/F,EAAAgG,qBAAqB,EAAG,GAAKhF,GACrDV,EAAO2F,SAASC,uBAChB5F,EAAOqD,YAAa,EAEpBpD,EAAS,IAAI,EAAAwB,EAAAgE,OAAO,IAAI,EAAA/F,EAAAmG,kBAAkB,GAAK,GAAK,KAAOlF,GAC3DV,EAAOoD,YAAa,EAEpBtD,EAAMuD,IAAKtD,EAAQC,GAGnBC,EAAS,IAAI,EAAAR,EAAAoG,MACb5F,EAAOmD,YAAa,EACpBnD,EAAO6F,eAAgB,EAEvB5F,EAAU,IAAI,EAAAT,EAAAoG,MACd3F,EAAQkD,YAAa,EACrBlD,EAAQ4F,eAAgB,EAExB3F,EAAU,IAAI,EAAAV,EAAAoG,MACd1F,EAAQiD,YAAa,EACrBjD,EAAQ2F,eAAgB,EAExB1F,EAAU,IAAI,EAAAX,EAAAoG,MACdzF,EAAQgD,YAAa,EACrBhD,EAAQ0F,eAAgB,EACxBhG,EAAMuD,IAAKpD,EAAQC,EAASC,EAASC,GAErC,MAAM2F,EAAQ,IAAI,EAAAtG,EAAAoG,MAAM,IAAI,EAAApG,EAAAuG,eAAiB,IAAI,EAAAvG,EAAAwG,gBAAgB,CAAEnB,MAAO,SAAUG,aAAa,EAAMD,QAAS,QAEhHe,EAAM9E,SAASC,GAAMgF,KAAKC,GAAK,EAC/BJ,EAAMlE,SAASV,GAAI,EACnB4E,EAAMK,MAAMxC,UAAW,IACvBmC,EAAMD,eAAgB,EACtBhG,EAAMuD,IAAK0C,GAEXjF,OAAOuF,iBAAkB,UAAU,WAElCzG,EAAO0G,OAASxF,OAAOwB,WAAaxB,OAAOyB,YAC3C3C,EAAOuE,yBAEPxE,EAAS0C,QAASvB,OAAOwB,WAAYxB,OAAOyB,Y,IAE1C,GAEH5B,G,CArHD4F","sources":["examples/multiop.js"],"sourcesContent":["import {\n\tWebGLRenderer,\n\tPCFSoftShadowMap,\n\tScene,\n\tDirectionalLight,\n\tAmbientLight,\n\tPerspectiveCamera,\n\tDoubleSide,\n\tMesh,\n\tMeshStandardMaterial,\n\tShadowMaterial,\n\tPlaneGeometry,\n\tCylinderGeometry,\n\tIcosahedronGeometry,\n} from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport {\n\tBrush,\n\tEvaluator,\n\tlogTriangleDefinitions,\n\tADDITION,\n\tSUBTRACTION,\n\tREVERSE_SUBTRACTION,\n\tINTERSECTION,\n} from '../src';\n\nwindow.logTriangleDefinitions = logTriangleDefinitions;\n\nlet renderer, camera, controls, scene;\nlet brush1, brush2;\nlet result, result2, result3, result4, light;\nlet csgEvaluator;\nlet mat1, mat2, transMat1, transMat2;\n\ninit();\n\nasync function init() {\n\n\t// const bgColor = bf360c;\n\t//  004d40\n\tconst bgColor = 0x15100c;\n\n\t// renderer setup\n\trenderer = new WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( bgColor, 1 );\n\trenderer.shadowMap.enabled = true;\n\trenderer.shadowMap.type = PCFSoftShadowMap;\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// scene setup\n\tscene = new Scene();\n\n\t// lights\n\tlight = new DirectionalLight( 0xffffff, 3.5 );\n\tlight.position.set( 0, 2, 0 );\n\tlight.castShadow = true;\n\tscene.add( light, light.target );\n\tscene.add( new AmbientLight( 0xe65100, 0.25 ) );\n\n\t// shadows\n\tconst shadowCam = light.shadow.camera;\n\tlight.castShadow = true;\n\tlight.shadow.mapSize.setScalar( 4096 );\n\tlight.shadow.bias = 1e-5;\n\tlight.shadow.normalBias = 1e-2;\n\n\tshadowCam.left = shadowCam.bottom = - 5;\n\tshadowCam.right = shadowCam.top = 5;\n\tshadowCam.updateProjectionMatrix();\n\n\t// camera setup\n\tcamera = new PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.set( 0, 7, 6 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\t// controls\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\n\t// bunny mesh has no UVs so skip that attribute\n\tcsgEvaluator = new Evaluator();\n\tcsgEvaluator.attributes = [ 'position', 'normal' ];\n\n\t// initialize materials\n\tmat1 = new MeshStandardMaterial();\n\tmat1.side = DoubleSide;\n\tmat1.roughness = 0.9;\n\tmat1.color.set( 0xfff8e1 );\n\n\tmat2 = mat1.clone();\n\tmat2.color.set( 0xff9800 );\n\n\ttransMat1 = mat1.clone();\n\ttransMat1.opacity = 0.15;\n\ttransMat1.transparent = true;\n\ttransMat1.depthWrite = false;\n\ttransMat1.polygonOffset = true;\n\ttransMat1.polygonOffsetFactor = 0.2;\n\ttransMat1.polygonOffsetUnits = 0.2;\n\ttransMat1.premultipliedAlpha = true;\n\n\ttransMat2 = transMat1.clone();\n\ttransMat2.color.copy( mat2.color );\n\n\t// initialize brushes\n\tbrush1 = new Brush( new IcosahedronGeometry( 1, 1 ), transMat1 );\n\tbrush1.geometry.computeVertexNormals();\n\tbrush1.castShadow = true;\n\n\tbrush2 = new Brush( new CylinderGeometry( 0.5, 0.5, 2.5 ), transMat2 );\n\tbrush2.castShadow = true;\n\n\tscene.add( brush1, brush2 );\n\n\t// add object displaying the result\n\tresult = new Mesh();\n\tresult.castShadow = true;\n\tresult.receiveShadow = true;\n\n\tresult2 = new Mesh();\n\tresult2.castShadow = true;\n\tresult2.receiveShadow = true;\n\n\tresult3 = new Mesh();\n\tresult3.castShadow = true;\n\tresult3.receiveShadow = true;\n\n\tresult4 = new Mesh();\n\tresult4.castShadow = true;\n\tresult4.receiveShadow = true;\n\tscene.add( result, result2, result3, result4 );\n\n\tconst floor = new Mesh( new PlaneGeometry(), new ShadowMaterial( { color: 0xe65100, transparent: true, opacity: 0.075 } ) );\n\t// const floor = new Mesh( new PlaneGeometry(), new MeshStandardMaterial() );\n\tfloor.rotation.x = - Math.PI / 2;\n\tfloor.position.y = - 2;\n\tfloor.scale.setScalar( 50 );\n\tfloor.receiveShadow = true;\n\tscene.add( floor );\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n\trender();\n\n}\n\nfunction render() {\n\n\trequestAnimationFrame( render );\n\n\tconst t = window.performance.now() + 9000;\n\tbrush1.rotation.x = t * 0.0001;\n\tbrush1.rotation.y = t * 0.00025;\n\tbrush1.rotation.z = t * 0.0005;\n\n\tbrush2.rotation.x = t * - 0.0002;\n\tbrush2.rotation.y = t * - 0.0005;\n\tbrush2.rotation.z = t * - 0.001;\n\n\tbrush1.updateMatrixWorld();\n\tbrush2.updateMatrixWorld();\n\n\tbrush1.material = mat1;\n\tbrush2.material = mat2;\n\tcsgEvaluator.evaluate( brush1, brush2, [ SUBTRACTION, INTERSECTION, ADDITION, REVERSE_SUBTRACTION ], [ result, result2, result3, result4 ] );\n\tresult.position.x = - 3.5;\n\tresult.position.z = 3.5;\n\n\tresult2.position.x = 3.5;\n\tresult2.position.z = 3.5;\n\n\tresult3.position.x = - 3.5;\n\tresult3.position.z = - 3.5;\n\n\tresult4.position.x = 3.5;\n\tresult4.position.z = - 3.5;\n\n\tbrush1.material = transMat1;\n\tbrush2.material = transMat2;\n\n\trenderer.render( scene, camera );\n\n}\n\n\n\n"],"names":["$ilwiq","parcelRequire","$79b7dd6fa7e48d02$var$renderer","$79b7dd6fa7e48d02$var$camera","$79b7dd6fa7e48d02$var$controls","$79b7dd6fa7e48d02$var$scene","$79b7dd6fa7e48d02$var$brush1","$79b7dd6fa7e48d02$var$brush2","$79b7dd6fa7e48d02$var$result","$79b7dd6fa7e48d02$var$result2","$79b7dd6fa7e48d02$var$result3","$79b7dd6fa7e48d02$var$result4","$79b7dd6fa7e48d02$var$light","$79b7dd6fa7e48d02$var$csgEvaluator","$79b7dd6fa7e48d02$var$mat1","$79b7dd6fa7e48d02$var$mat2","$79b7dd6fa7e48d02$var$transMat1","$79b7dd6fa7e48d02$var$transMat2","$79b7dd6fa7e48d02$var$render","requestAnimationFrame","t","window","performance","now","rotation","x","y","z","updateMatrixWorld","material","evaluate","$4CEV9","SUBTRACTION","INTERSECTION","ADDITION","REVERSE_SUBTRACTION","position","render","logTriangleDefinitions","async","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","innerWidth","innerHeight","setClearColor","shadowMap","enabled","type","PCFSoftShadowMap","document","body","appendChild","domElement","Scene","DirectionalLight","set","castShadow","add","target","AmbientLight","shadowCam","shadow","camera","mapSize","setScalar","bias","normalBias","left","bottom","right","top","updateProjectionMatrix","PerspectiveCamera","far","$5Rd1x","OrbitControls","Evaluator","attributes","MeshStandardMaterial","side","DoubleSide","roughness","color","clone","opacity","transparent","depthWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","premultipliedAlpha","copy","Brush","IcosahedronGeometry","geometry","computeVertexNormals","CylinderGeometry","Mesh","receiveShadow","floor","PlaneGeometry","ShadowMaterial","Math","PI","scale","addEventListener","aspect","$79b7dd6fa7e48d02$var$init"],"version":3,"file":"multiop.85721a0c.js.map"}